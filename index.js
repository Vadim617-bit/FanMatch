// Start of Selection
const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const app = express();
const port = 3000;
const path = require('path');
const multer = require('multer');
const fs = require('fs');

// üîê NEW: –∑ .env –∞–±–æ —Ñ–æ–ª–±–µ–∫
const JWT_SECRET = process.env.JWT_SECRET || 'your_jwt_secret';

// –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é uploads, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
const uploadDir = path.join(__dirname, 'uploads');
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir);
}

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è multer
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = `${Date.now()}-${Math.round(Math.random() * 1E9)}`;
    const ext = path.extname(file.originalname);
    cb(null, `${file.fieldname}-${uniqueSuffix}${ext}`);
  }
});
const upload = multer({ storage });

// Serve uploaded images as static files
app.use('/uploads', express.static(uploadDir));

// –î–æ–¥–∞—Ç–∏ –≤—ñ–¥–¥–∞–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
app.use(express.static(path.join(__dirname, 'public')));

// –†–æ—É—Ç–∏–Ω–≥ –Ω–∞ HTML-—Å—Ç–æ—Ä—ñ–Ω–∫–∏
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/login', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'login.html'));
});

app.get('/register', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'register.html'));
});

app.get('/profile', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'profile.html'));
});

app.get('/create', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'create.html'));
});

// Middleware
app.use(cors());
app.use(express.json());

// DB
const db = new sqlite3.Database('./database.db', (err) => {
  if (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö', err);
  } else {
    console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite');
    console.log('üìÅ –®–ª—è—Ö –¥–æ –ë–î:', path.join(__dirname, 'database.db'));
  }
});

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—é—Ç—å
db.serialize(() => {
  db.run(`
    CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      username TEXT NOT NULL,
      email TEXT UNIQUE NOT NULL,
      password TEXT NOT NULL
      -- role –¥–æ–¥–∞—î–º–æ –Ω–∏–∂—á–µ —á–µ—Ä–µ–∑ ALTER TABLE, —â–æ–± –Ω–µ –ª–∞–º–∞—Ç–∏ —ñ—Å–Ω—É—é—á—ñ —ñ–Ω—Å—Ç–∞–ª—è—Ü—ñ—ó
    )
  `);

  // üîß NEW: –¥–æ–¥–∞—Ç–∏ –∫–æ–ª–æ–Ω–∫—É role, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î
  db.get(`PRAGMA table_info(users)`, [], (err) => {
    if (err) {
      console.error('PRAGMA error:', err);
    } else {
      db.all(`PRAGMA table_info(users)`, [], (_e, cols) => {
        const hasRole = cols?.some(c => c.name === 'role');
        if (!hasRole) {
          db.run(`ALTER TABLE users ADD COLUMN role TEXT DEFAULT 'user'`, (e2) => {
            if (e2) console.warn('ALTER users ADD role warning:', e2.message);
            else console.log('–ö–æ–ª–æ–Ω–∫—É role –¥–æ–¥–∞–Ω–æ –¥–æ users (default user)');
          });
        }
      });
    }
  });

  db.run(`
    CREATE TABLE IF NOT EXISTS events (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      title TEXT NOT NULL,
      location TEXT NOT NULL,
      time TEXT NOT NULL,
      creator_id INTEGER NOT NULL,
      image TEXT,
      FOREIGN KEY (creator_id) REFERENCES users(id)
    )
  `);

  db.run(`
    CREATE TABLE IF NOT EXISTS participants (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      event_id INTEGER NOT NULL,
      user_id INTEGER NOT NULL,
      FOREIGN KEY (event_id) REFERENCES events(id),
      FOREIGN KEY (user_id) REFERENCES users(id)
    )
  `);

  db.run(`
    CREATE TABLE IF NOT EXISTS posts (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      title TEXT NOT NULL,
      content TEXT NOT NULL,
      image TEXT,
      creator_id INTEGER NOT NULL,
      created_at TEXT DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (creator_id) REFERENCES users(id)
    )
  `);
});

// üîê NEW: seed admin (—Ä–∞–∑–æ–≤–æ —Å—Ç–≤–æ—Ä–∏—Ç—å, —è–∫—â–æ –Ω–µ–º–∞—î)
(function seedAdminOnce() {
  const adminEmail = 'admin@fanmatch.local';
  const adminPassHash = bcrypt.hashSync('Admin123!', 10); // ‚ö†Ô∏è –∑–∞–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—å —É –ø—Ä–æ–¥–∞–∫—à–Ω—ñ

  db.get(`SELECT id FROM users WHERE email = ?`, [adminEmail], (err, row) => {
    if (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–¥–º—ñ–Ω–∞:', err);
      return;
    }
    if (!row) {
      db.run(
        `INSERT INTO users (username, email, password, role) VALUES (?, ?, ?, 'admin')`,
        ['Admin', adminEmail, adminPassHash],
        function (e2) {
          if (e2) console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞:', e2);
          else console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${adminEmail} / Admin123! (–∑–∞–º—ñ–Ω–∏)`);
        }
      );
    }
  });
})();

// üîí NEW: JWT middleware
function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π' });
  }
  const token = authHeader.split(' ')[1];
  jwt.verify(token, JWT_SECRET, (err, payload) => {
    if (err) return res.status(403).json({ error: '–ù–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π —Ç–æ–∫–µ–Ω' });
    req.user = payload; // { id, role }
    next();
  });
}

// üîí NEW: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–ª—ñ admin
function isAdmin(req, res, next) {
  // –î–æ–≤—ñ—Ä—è—î–º–æ—Å—å JWT, –∞–ª–µ –ø–µ—Ä–µ–ø—Ä–æ–≤—ñ—Ä–∏–º–æ –≤ –ë–î (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –∑–º—ñ–Ω–∏ —Ä–æ–ª—ñ)
  db.get(`SELECT role FROM users WHERE id = ?`, [req.user?.id], (err, row) => {
    if (err || !row) return res.status(403).json({ error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    if (row.role !== 'admin') return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤' });
    next();
  });
}

// üîπ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
app.post('/register', async (req, res) => {
  const { username, email, password } = req.body;
  if (!username || !email || !password) return res.status(400).json({ error: '–£—Å—ñ –ø–æ–ª—è –æ–±–æ–≤ º—è–∑–∫–æ–≤—ñ' });
  const hashedPassword = await bcrypt.hash(password, 10);

  db.get(`SELECT * FROM users WHERE email = ?`, [email], (err, row) => {
    if (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', err);
      return res.status(500).json({ error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }

    if (row) {
      return res.status(400).json({ error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–æ—é –ø–æ—à—Ç–æ—é –≤–∂–µ —ñ—Å–Ω—É—î' });
    }

    db.run(
      `INSERT INTO users (username, email, password, role) VALUES (?, ?, ?, 'user')`,
      [username, email, hashedPassword],
      function (err) {
        if (err) {
          console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', err);
          return res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞' });
        }
        res.status(201).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ' });
      }
    );
  });
});

// üîπ –õ–æ–≥—ñ–Ω (–æ–Ω–æ–≤–ª–µ–Ω–æ: –¥–æ–¥–∞—î–º–æ role —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —ñ –≤ —Ç–æ–∫–µ–Ω)
app.post('/login', (req, res) => {
  const { email, password } = req.body;

  db.get(`SELECT * FROM users WHERE email = ?`, [email], async (err, user) => {
    if (err || !user) {
      return res.status(401).json({ error: '–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å' });
    }

    const valid = await bcrypt.compare(password, user.password);
    if (!valid) {
      return res.status(401).json({ error: '–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å' });
    }

    // üîê NEW: –ø—ñ–¥–ø–∏—Å—É—î–º–æ { id, role } —î–¥–∏–Ω–∏–º —Å–µ–∫—Ä–µ—Ç–æ–º
    const token = jwt.sign({ id: user.id, role: user.role || 'user' }, JWT_SECRET, {
      expiresIn: process.env.TOKEN_EXPIRES || '30d'
    });
    res.json({ token, username: user.username, userId: user.id, role: user.role || 'user' });
  });
});

// üîπ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó (–ó–ê–•–ò–°–¢: —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω)
app.post('/events', authenticateToken, isAdmin, upload.single('image'), (req, res) => {
  const { title, location, time, creatorId } = req.body; // creatorId –ª–∏—à–∞—î–º–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
  const imagePath = req.file ? `/uploads/${req.file.filename}` : null;

  if (!title || !location || !time) {
    return res.status(400).json({ error: '–£—Å—ñ –ø–æ–ª—è –æ–±–æ–≤ º—è–∑–∫–æ–≤—ñ' });
  }

  const creator_id = req.user?.id || creatorId; // –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç ‚Äî —Ç–æ–∫–µ–Ω
  db.run(
    `INSERT INTO events (title, location, time, creator_id, image) VALUES (?, ?, ?, ?, ?)`,
    [title, location, time, creator_id, imagePath],
    function (err) {
      if (err) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó:', err.message);
        return res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–æ–¥—ñ—ó' });
      }
      res.status(201).json({ eventId: this.lastID });
    }
  );
});

// üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–¥—ñ–π
app.get('/events', (req, res) => {
  db.all(`SELECT events.*, users.username AS creator_name FROM events JOIN users ON events.creator_id = users.id`, [], (err, rows) => {
    if (err) {
      return res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–¥—ñ—ó' });
    }
    res.json(rows);
  });
});

// üîπ –ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –ø–æ–¥—ñ—ó (–ó–ê–•–ò–°–¢: –ø–æ—Ç—Ä—ñ–±–µ–Ω –∞–∫–∞—É–Ω—Ç)
app.post('/events/:id/join', authenticateToken, (req, res) => {
  const eventId = req.params.id;
  const userId = req.user.id; // –ø–µ—Ä–µ—Å—Ç–∞—î–º–æ –¥–æ–≤—ñ—Ä—è—Ç–∏ body

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ –ø—Ä–∏—î–¥–Ω–∞–Ω–∏–π
  db.get(
    `SELECT * FROM participants WHERE event_id = ? AND user_id = ?`,
    [eventId, userId],
    (err, row) => {
      if (row) {
        return res.status(400).json({ error: '–í–∏ –≤–∂–µ –ø—Ä–∏—î–¥–Ω–∞–Ω—ñ –¥–æ —Ü—ñ—î—ó –ø–æ–¥—ñ—ó' });
      }

      db.run(
        `INSERT INTO participants (event_id, user_id) VALUES (?, ?)`,
        [eventId, userId],
        function (err) {
          if (err) {
            return res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –ø–æ–¥—ñ—ó' });
          }
          res.status(201).json({ message: '–£—Å–ø—ñ—à–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–Ω–æ' });
        }
      );
    }
  );
});

// üîπ –°–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ—ó
app.get('/events/:id/participants', (req, res) => {
  const eventId = req.params.id;

  db.all(
    `SELECT users.id, users.username FROM participants JOIN users ON participants.user_id = users.id WHERE participants.event_id = ?`,
    [eventId],
    (err, rows) => {
      if (err) {
        return res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤' });
      }
      res.json(rows);
    }
  );
});

app.listen(port, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${port}`);
});

// üîé –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–¥—ñ—ó –∑–∞ ID
app.get('/events/:id', (req, res) => {
  const eventId = req.params.id;

  db.get(
    `SELECT events.*, users.username AS creator_name FROM events JOIN users ON events.creator_id = users.id WHERE events.id = ?`,
    [eventId],
    (err, row) => {
      if (err) {
        return res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–¥—ñ—é' });
      }
      if (!row) {
        return res.status(404).json({ error: '–ü–æ–¥—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
      }
      res.json(row);
    }
  );
});

// üîÅ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–¥—ñ—ó (–ó–ê–•–ò–°–¢: —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω)
app.put('/events/:id', authenticateToken, isAdmin, (req, res) => {
  const eventId = req.params.id;
  const { title, location, time } = req.body;

  db.run(
    `UPDATE events SET title = ?, location = ?, time = ? WHERE id = ?`,
    [title, location, time, eventId],
    function (err) {
      if (err) {
        return res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ' });
      }
      res.json({ message: '–û–Ω–æ–≤–ª–µ–Ω–æ' });
    }
  );
});

// ‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–¥—ñ—ó (–ó–ê–•–ò–°–¢: —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω)
app.delete('/events/:id', authenticateToken, isAdmin, (req, res) => {
  const eventId = req.params.id;

  db.run(
    `DELETE FROM events WHERE id = ?`,
    [eventId],
    function (err) {
      if (err) {
        return res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ' });
      }
      res.json({ message: '–í–∏–¥–∞–ª–µ–Ω–æ' });
    }
  );
});

// üîπ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç–∞ (–ó–ê–•–ò–°–¢: —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω)
app.post('/posts', authenticateToken, isAdmin, upload.single('image'), (req, res) => {
  const { title, content, creatorId } = req.body;
  const imagePath = req.file ? `/uploads/${req.file.filename}` : null;

  if (!title || !content) {
    return res.status(400).json({ error: '–£—Å—ñ –ø–æ–ª—è (–∫—Ä—ñ–º –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è) –æ–±–æ–≤ º—è–∑–∫–æ–≤—ñ' });
  }

  const creator_id = req.user?.id || creatorId; // –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç —Ç–æ–∫–µ–Ω—É
  db.run(
    `INSERT INTO posts (title, content, image, creator_id) VALUES (?, ?, ?, ?)`,
    [title, content, imagePath, creator_id],
    function (err) {
      if (err) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–æ—Å—Ç–∞:', err.message);
        return res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç' });
      }
      res.status(201).json({ postId: this.lastID });
    }
  );
});

// üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ—Å—Ç—ñ–≤
app.get('/posts', (req, res) => {
  db.all(`
    SELECT posts.*, users.username AS author
    FROM posts
    JOIN users ON posts.creator_id = users.id
    ORDER BY created_at DESC
  `, [], (err, rows) => {
    if (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ—Å—Ç—ñ–≤:', err);
      return res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å—Ç–∏' });
    }
    // Ensure image paths are correctly prefixed for client access
    const postsWithImagePaths = rows.map(post => {
      if (post.image && !post.image.startsWith('http')) {
        post.image = `${req.protocol}://${req.get('host')}${post.image}`;
      }
      return post;
    });
    res.json(postsWithImagePaths);
  });
});

// ‚úÖ –ù–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è AI-–Ω–æ–≤–∏–Ω (–ó–ê–•–ò–°–¢: —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω / –¥–ª—è Make)
app.post('/api/ai-posts', authenticateToken, isAdmin, (req, res) => {
  const { title, content, image, author } = req.body;

  console.log('üì• AI POST DATA:', { title, content, image, author });

  if (!title || !content) {
    return res.status(400).json({ error: 'Title and content are required.' });
  }

  const creatorIdFromToken = req.user?.id || 1; // fallback, –∞–ª–µ –º–∞—î –±—É—Ç–∏ –∑ —Ç–æ–∫–µ–Ω—É
  db.run(
    'INSERT INTO posts (title, content, image, creator_id) VALUES (?, ?, ?, ?)',
    [title, content, image || null, creatorIdFromToken],
    function (err) {
      if (err) {
        console.error('‚ùå SQLite error:', err.message);
        return res.status(500).json({ error: err.message });
      }
      res.status(201).json({
        id: this.lastID,
        title,
        content,
        image: image ? `${req.protocol}://${req.get('host')}${image}` : null, // Ensure image path is correctly prefixed
        author
      });
    }
  );
});

// –ü—Ä–æ–∫—Å—ñ –¥–ª—è /api/posts (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —à–ª—è—Ö –¥–æ /posts)
app.get('/api/posts', (req, res) => {
  db.all(`
    SELECT posts.*, users.username AS author
    FROM posts
    JOIN users ON posts.creator_id = users.id
    ORDER BY created_at DESC
  `, [], (err, rows) => {
    if (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ—Å—Ç—ñ–≤:', err);
      return res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å—Ç–∏' });
    }
    const postsWithImagePaths = rows.map(post => {
      if (post.image && !post.image.startsWith('http')) {
        post.image = `${req.protocol}://${req.get('host')}${post.image}`;
      }
      return post;
    });
    res.json(postsWithImagePaths);
  });
});
