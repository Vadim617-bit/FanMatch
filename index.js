const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const app = express();
const port = 3000;
const path = require('path');

// –î–æ–¥–∞—Ç–∏ –≤—ñ–¥–¥–∞–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
app.use(express.static(path.join(__dirname, 'public')));

// –†–æ—É—Ç–∏–Ω–≥ –Ω–∞ HTML-—Å—Ç–æ—Ä—ñ–Ω–∫–∏
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/login', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'login.html'));
});

app.get('/register', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'register.html'));
});

app.get('/profile', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'profile.html'));
});

// Middleware
app.use(cors());
app.use(express.json());

// DB
const db = new sqlite3.Database('./database.db', (err) => {
  if (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö', err);
  } else {
    console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite');
  }
});

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—é—Ç—å
db.serialize(() => {
  db.run(`
    CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      username TEXT NOT NULL,
      email TEXT UNIQUE NOT NULL,
      password TEXT NOT NULL
    )
  `);

  db.run(`
    CREATE TABLE IF NOT EXISTS events (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      title TEXT NOT NULL,
      location TEXT NOT NULL,
      time TEXT NOT NULL,
      creator_id INTEGER NOT NULL,
      FOREIGN KEY (creator_id) REFERENCES users(id)
    )
  `);

  db.run(`
    CREATE TABLE IF NOT EXISTS participants (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      event_id INTEGER NOT NULL,
      user_id INTEGER NOT NULL,
      FOREIGN KEY (event_id) REFERENCES events(id),
      FOREIGN KEY (user_id) REFERENCES users(id)
    )
  `);
});

// üîπ Simple check route
app.get('/', (req, res) => {
  res.send('FanMatch backend is running!');
});

// üîπ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
app.post('/register', async (req, res) => {
  const { username, email, password } = req.body;
  const hashedPassword = await bcrypt.hash(password, 10);

  db.run(
    `INSERT INTO users (username, email, password) VALUES (?, ?, ?)`,
    [username, email, hashedPassword],
    function (err) {
      if (err) {
        console.error(err.message);
        return res.status(400).json({ error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–æ—é –ø–æ—à—Ç–æ—é –≤–∂–µ —ñ—Å–Ω—É—î' });
      }
      res.status(201).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ' });
    }
  );
});

// üîπ –õ–æ–≥—ñ–Ω
app.post('/login', (req, res) => {
  const { email, password } = req.body;

  db.get(`SELECT * FROM users WHERE email = ?`, [email], async (err, user) => {
    if (err || !user) {
      return res.status(401).json({ error: '–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å' });
    }

    const valid = await bcrypt.compare(password, user.password);
    if (!valid) {
      return res.status(401).json({ error: '–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å' });
    }

    const token = jwt.sign({ id: user.id }, 'your_jwt_secret');
    res.json({ token, username: user.username, userId: user.id });
  });
});

// üîπ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó
app.post('/events', (req, res) => {
  const { title, location, time, creatorId } = req.body;

  db.run(
    `INSERT INTO events (title, location, time, creator_id) VALUES (?, ?, ?, ?)`,
    [title, location, time, creatorId],
    function (err) {
      if (err) {
        return res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–æ–¥—ñ—ó' });
      }
      res.status(201).json({ eventId: this.lastID });
    }
  );
});

// üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–¥—ñ–π
app.get('/events', (req, res) => {
  db.all(`SELECT events.*, users.username AS creator_name FROM events JOIN users ON events.creator_id = users.id`, [], (err, rows) => {
    if (err) {
      return res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–¥—ñ—ó' });
    }
    res.json(rows);
  });
});

// üîπ –ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –ø–æ–¥—ñ—ó
app.post('/events/:id/join', (req, res) => {
  const eventId = req.params.id;
  const { userId } = req.body;

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ –ø—Ä–∏—î–¥–Ω–∞–Ω–∏–π
  db.get(
    `SELECT * FROM participants WHERE event_id = ? AND user_id = ?`,
    [eventId, userId],
    (err, row) => {
      if (row) {
        return res.status(400).json({ error: '–í–∏ –≤–∂–µ –ø—Ä–∏—î–¥–Ω–∞–Ω—ñ –¥–æ —Ü—ñ—î—ó –ø–æ–¥—ñ—ó' });
      }

      db.run(
        `INSERT INTO participants (event_id, user_id) VALUES (?, ?)`,
        [eventId, userId],
        function (err) {
          if (err) {
            return res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –ø–æ–¥—ñ—ó' });
          }
          res.status(201).json({ message: '–£—Å–ø—ñ—à–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–Ω–æ' });
        }
      );
    }
  );
});

// üîπ –°–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ—ó
app.get('/events/:id/participants', (req, res) => {
  const eventId = req.params.id;

  db.all(
    `SELECT users.id, users.username FROM participants JOIN users ON participants.user_id = users.id WHERE participants.event_id = ?`,
    [eventId],
    (err, rows) => {
      if (err) {
        return res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤' });
      }
      res.json(rows);
    }
  );
});

app.listen(port, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${port}`);
});
